<?xml version="1.0" encoding="utf-8"?>
<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->
<!--- The default skin class for the Spark ComboBox component.
The skin for the anchor button for a ComboBox component
is defined by the ComboBoxButtonSkin class.  The skin for the text input
is defined by the ComboBoxTextInputSkin class.

@see spark.components.ComboBox
@see spark.skins.spark.ComboBoxButtonSkin

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 alpha.disabled="1"
			 xmlns:mx="library://ns.adobe.com/flex/mx"
			 xmlns:components="ng.components.*" xmlns:component="lib.component.*" xmlns:skins="lib.component.skins.*">
	<fx:Metadata>[HostComponent("lib.component.DateField")]</fx:Metadata>
	
	<!-- host component -->
	<fx:Script fb:purpose="styling">
		<![CDATA[
			import lib.utils.IconsChar;
			private var paddingChanged:Boolean;
			private var cornerRadiusChanged:Boolean;
			private var cornerRadius:Number=0;
			
			/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
			static private const contentFill:Array=["bgFill"];
			
			/**
			 * @private
			 */
			override public function get contentItems():Array {
				return contentFill
			}
			
			
			/**
			 *  @private
			 */
			override protected function commitProperties():void {
				super.commitProperties();
			}
			
			/**
			 *  @private
			 */
			override public function styleChanged(styleProp:String):void {
				var allStyles:Boolean=!styleProp || styleProp == "styleName";
				
				super.styleChanged(styleProp);
				
				if (allStyles || styleProp.indexOf("padding") == 0) {
					paddingChanged=true;
					invalidateProperties();
				}
				if (allStyles || styleProp == "cornerRadius") {
					cornerRadiusChanged=true;
					invalidateProperties();
				}
			}
			
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				if (getStyle("borderVisible") == false) {
					if (border)
						border.visible=false;
					if (background) {
						background.left=background.top=background.right=background.bottom=0;
					}
				} else {
					if (border)
						border.visible=true;
					if (background) {
						background.left=background.top=background.right=background.bottom=1;
					}
				}
				
				if (dropShadow)
					dropShadow.visible=getStyle("dropShadowVisible");
				
				if (borderStroke) {
					borderStroke.color=getStyle("borderColor");
					borderStroke.alpha=getStyle("borderAlpha");
				}
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="open"/>
		<s:State name="disabled"/>
	</s:states>
	
	<!---
	The PopUpAnchor control that opens the drop-down list.
	
	<p>In a custom skin class that uses transitions, set the
	<code>itemDestructionPolicy</code> property to <code>never</code>.</p>
	-->
	<s:PopUpAnchor id="popUp"
				   displayPopUp.normal="false"
				   displayPopUp.open="true"
				   includeIn="open"
				   left="0"
				   right="0"
				   top="0"
				   bottom="0"
				   itemDestructionPolicy="auto"
				   popUpPosition="below"
				   popUpWidthMatchesAnchorWidth="{hostComponent.popUpWidthMatchesAnchorWidth}" >
		
		<!---
		This includes borders, background colors, scrollers, and filters.
		@copy spark.components.supportClasses.DropDownListBase#dropDown
		-->
		<s:Group id="dropDown"
				 mouseDownOutside="dispatchEvent(new Event('closeDateChooser',true))">
			
			<!-- drop shadow -->
			<!--- @private -->
			<s:RectangularDropShadow id="dropShadow"
									 blurX="20"
									 blurY="20"
									 alpha="0.45"
									 distance="7"
									 angle="90"
									 color="#000000"
									 left="0"
									 top="0"
									 right="0"
									 bottom="0"/>
			
			<!-- border -->
			<!--- @private -->
			<s:Rect id="border"
					left="0"
					right="0"
					top="0"
					bottom="0">
				<s:stroke>
					<!--- @private -->
					<s:SolidColorStroke id="borderStroke"
										weight="1"/>
				</s:stroke>
			</s:Rect>
			
			<!-- fill -->
			<!--- Defines the appearance of drop-down list's background fill. -->
			<s:Rect id="background"
					left="1"
					right="1"
					top="1"
					bottom="1">
				<s:fill>
					<!---
					@private
					The color of the drop down's background fill.
					The default color is 0xFFFFFF.
					-->
					<s:SolidColor id="bgFill"
								  color="0xFFFFFF"/>
				</s:fill>
			</s:Rect>
			
			<!--<mx:DateChooser id="dateChooser"
							selectedDate="{hostComponent.selectedInternalDate}"
							fontFamily="{hostComponent.calendarFont}"
							mouseDownOutside="dispatchEvent(new Event('closeDateChooser',true))"  width="100%" minWidth="185" maxYear="9999" />-->
			<skins:DateChooser id="dateChooser" selectedDate="{hostComponent.selectedInternalDate}" />
		</s:Group>
	</s:PopUpAnchor>
	
	<!---  The default skin is ComboBoxButtonSkin.
	@copy spark.components.supportClasses.DropDownListBase#openButton
	@see spark.skins.spark.ComboBoxButtonSkin -->
	
	<component:Button id="openButton"
			  right="0"
			  top="0"
			  bottom="0"
			  focusEnabled="false"
			  skinClass="lib.component.skins.ButtonIconSkin"
			  tabEnabled="false"
			  label="{IconsChar.event_note}"
			  visible="false"/>
	
	<!--- @copy spark.components.ComboBox#textInput -->
	<component:TextInput id="textInput"
				 enabled.disabled="false"
				 left="0"
				 right="0"
				 top="0"
				 bottom="0"
				 prompt="{hostComponent.prompt}"
				 editable="{hostComponent.editable}"
				 textAlign="{hostComponent.textAlign}" fontFamily="OpenSans" errorString="{hostComponent.errorString}" />
	
</s:SparkSkin>

